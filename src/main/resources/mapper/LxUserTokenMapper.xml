<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lanxinbase.repository.mybatis.mapper.LxUserTokenMapper" >
  <resultMap id="BaseResultMap" type="com.lanxinbase.model.LxUserToken" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="userId" property="userId" jdbcType="INTEGER" />
    <result column="token" property="token" jdbcType="VARCHAR" />
    <result column="expireIn" property="expireIn" jdbcType="INTEGER" />
    <result column="lat" property="lat" jdbcType="DOUBLE" />
    <result column="lnt" property="lnt" jdbcType="DOUBLE" />
    <result column="loginTime" property="loginTime" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, userId, token, expireIn, lat, lnt, loginTime, status
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from lx_user_token
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from lx_user_token
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.lanxinbase.model.LxUserToken" >
    insert into lx_user_token (id, userId, token, 
      expireIn, lat, lnt, loginTime, 
      status)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{token,jdbcType=VARCHAR}, 
      #{expireIn,jdbcType=INTEGER}, #{lat,jdbcType=DOUBLE}, #{lnt,jdbcType=DOUBLE}, #{loginTime,jdbcType=INTEGER}, 
      #{status,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.lanxinbase.model.LxUserToken" >
    insert into lx_user_token
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userId != null" >
        userId,
      </if>
      <if test="token != null" >
        token,
      </if>
      <if test="expireIn != null" >
        expireIn,
      </if>
      <if test="lat != null" >
        lat,
      </if>
      <if test="lnt != null" >
        lnt,
      </if>
      <if test="loginTime != null" >
        loginTime,
      </if>
      <if test="status != null" >
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="token != null" >
        #{token,jdbcType=VARCHAR},
      </if>
      <if test="expireIn != null" >
        #{expireIn,jdbcType=INTEGER},
      </if>
      <if test="lat != null" >
        #{lat,jdbcType=DOUBLE},
      </if>
      <if test="lnt != null" >
        #{lnt,jdbcType=DOUBLE},
      </if>
      <if test="loginTime != null" >
        #{loginTime,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.lanxinbase.model.LxUserToken" >
    update lx_user_token
    <set >
      <if test="userId != null" >
        userId = #{userId,jdbcType=INTEGER},
      </if>
      <if test="token != null" >
        token = #{token,jdbcType=VARCHAR},
      </if>
      <if test="expireIn != null" >
        expireIn = #{expireIn,jdbcType=INTEGER},
      </if>
      <if test="lat != null" >
        lat = #{lat,jdbcType=DOUBLE},
      </if>
      <if test="lnt != null" >
        lnt = #{lnt,jdbcType=DOUBLE},
      </if>
      <if test="loginTime != null" >
        loginTime = #{loginTime,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lanxinbase.model.LxUserToken" >
    update lx_user_token
    set userId = #{userId,jdbcType=INTEGER},
      token = #{token,jdbcType=VARCHAR},
      expireIn = #{expireIn,jdbcType=INTEGER},
      lat = #{lat,jdbcType=DOUBLE},
      lnt = #{lnt,jdbcType=DOUBLE},
      loginTime = #{loginTime,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>